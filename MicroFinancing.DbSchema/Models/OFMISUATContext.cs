// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MicroFinancing.DbSchema.Models;

public partial class OFMISUATContext : DbContext
{
    public OFMISUATContext(DbContextOptions<OFMISUATContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Action> Actions { get; set; }

    public virtual DbSet<ActionTaken> ActionTakens { get; set; }

    public virtual DbSet<Airdetail> Airdetails { get; set; }

    public virtual DbSet<Aireport> Aireports { get; set; }

    public virtual DbSet<Allotment> Allotments { get; set; }

    public virtual DbSet<AllotmentLetter> AllotmentLetters { get; set; }

    public virtual DbSet<Aoq> Aoqs { get; set; }

    public virtual DbSet<Aoqdetail> Aoqdetails { get; set; }

    public virtual DbSet<Appropriation> Appropriations { get; set; }

    public virtual DbSet<Apr> Aprs { get; set; }

    public virtual DbSet<Aprdetail> Aprdetails { get; set; }

    public virtual DbSet<Bacmember> Bacmembers { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<ColumnTitle> ColumnTitles { get; set; }

    public virtual DbSet<ControlNumber> ControlNumbers { get; set; }

    public virtual DbSet<DefaultAccount> DefaultAccounts { get; set; }

    public virtual DbSet<DefaultSetting> DefaultSettings { get; set; }

    public virtual DbSet<DocumentAction> DocumentActions { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<Function> Functions { get; set; }

    public virtual DbSet<FundType> FundTypes { get; set; }

    public virtual DbSet<Ic> Ics { get; set; }

    public virtual DbSet<Icsdetail> Icsdetails { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItenaryDetail> ItenaryDetails { get; set; }

    public virtual DbSet<ItenaryofTravel> ItenaryofTravels { get; set; }

    public virtual DbSet<Letter> Letters { get; set; }

    public virtual DbSet<Liquidation> Liquidations { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Lrdetail> Lrdetails { get; set; }

    public virtual DbSet<Obligation> Obligations { get; set; }

    public virtual DbSet<Office> Offices { get; set; }

    public virtual DbSet<Ordetail> Ordetails { get; set; }

    public virtual DbSet<Par> Pars { get; set; }

    public virtual DbSet<Pardetail> Pardetails { get; set; }

    public virtual DbSet<Payee> Payees { get; set; }

    public virtual DbSet<Payroll> Payrolls { get; set; }

    public virtual DbSet<PayrollDetail> PayrollDetails { get; set; }

    public virtual DbSet<PayrollDifferential> PayrollDifferentials { get; set; }

    public virtual DbSet<PayrollDifferentialDetail> PayrollDifferentialDetails { get; set; }

    public virtual DbSet<PayrollOt> PayrollOts { get; set; }

    public virtual DbSet<PayrollOtdetail> PayrollOtdetails { get; set; }

    public virtual DbSet<PayrollWage> PayrollWages { get; set; }

    public virtual DbSet<PayrollWageDetail> PayrollWageDetails { get; set; }

    public virtual DbSet<Pi> Pis { get; set; }

    public virtual DbSet<Pisdetail> Pisdetails { get; set; }

    public virtual DbSet<Podetail> Podetails { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<Pqdetail> Pqdetails { get; set; }

    public virtual DbSet<Prdetail> Prdetails { get; set; }

    public virtual DbSet<PriceQuotation> PriceQuotations { get; set; }

    public virtual DbSet<Province> Provinces { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseRequest> PurchaseRequests { get; set; }

    public virtual DbSet<ReAlignment> ReAlignments { get; set; }

    public virtual DbSet<Risdetail> Risdetails { get; set; }

    public virtual DbSet<Risheader> Risheaders { get; set; }

    public virtual DbSet<SalarySchedule> SalarySchedules { get; set; }

    public virtual DbSet<Signatory> Signatories { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Template> Templates { get; set; }

    public virtual DbSet<Town> Towns { get; set; }

    public virtual DbSet<TrashBin> TrashBins { get; set; }

    public virtual DbSet<UnitOfMeasurement> UnitOfMeasurements { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserClaim> UserClaims { get; set; }

    public virtual DbSet<UserLogin> UserLogins { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<Year> Years { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Action>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Actions_1");

            entity.Property(e => e.Category).HasMaxLength(50);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Actions_Actions");
        });

        modelBuilder.Entity<ActionTaken>(entity =>
        {
            entity.Property(e => e.ActionTaken1)
                .HasMaxLength(128)
                .HasColumnName("ActionTaken");
            entity.Property(e => e.TableName).HasMaxLength(128);
        });

        modelBuilder.Entity<Airdetail>(entity =>
        {
            entity.ToTable("AIRDetails");

            entity.Property(e => e.AireportId).HasColumnName("AIReportId");
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Item).IsRequired();
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Aireport).WithMany(p => p.Airdetails)
                .HasForeignKey(d => d.AireportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AIRDetails_AIReports");
        });

        modelBuilder.Entity<Aireport>(entity =>
        {
            entity.ToTable("AIReports");

            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.Pgsofficer).HasColumnName("PGSOfficer");
            entity.Property(e => e.PgsofficerPosition).HasColumnName("PGSOfficerPosition");
            entity.Property(e => e.Poid).HasColumnName("POId");
            entity.Property(e => e.PreparedBy).HasMaxLength(128);
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.Risdate).HasColumnName("RISDate");
            entity.Property(e => e.Risno).HasColumnName("RISNo");

            entity.HasOne(d => d.PreparedByNavigation).WithMany(p => p.Aireports)
                .HasForeignKey(d => d.PreparedBy)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_AIReports_Users");

            entity.HasOne(d => d.Pr).WithMany(p => p.Aireports)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_AIReports_PurchaseRequests");
        });

        modelBuilder.Entity<Allotment>(entity =>
        {
            entity.Property(e => e.AllotmentAmount).HasColumnType("money");
            entity.Property(e => e.CreatedB).HasMaxLength(128);

            entity.HasOne(d => d.Appropriation).WithMany(p => p.Allotments)
                .HasForeignKey(d => d.AppropriationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Allotments_Appropriations");
        });

        modelBuilder.Entity<AllotmentLetter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Letters");

            entity.ToTable("AllotmentLetter");

            entity.Property(e => e.HeadofDivisionPos).HasColumnName("HeadofDivisionPOS");
            entity.Property(e => e.Pbo).HasColumnName("PBO");
            entity.Property(e => e.Pbopos).HasColumnName("PBOPos");
            entity.Property(e => e.Prid).HasColumnName("PRId");

            entity.HasOne(d => d.Appropriation).WithMany(p => p.AllotmentLetters)
                .HasForeignKey(d => d.AppropriationId)
                .HasConstraintName("FK_AllotmentLetter_Appropriations");

            entity.HasOne(d => d.Pr).WithMany(p => p.AllotmentLetters)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AllotmentLetter_PurchaseRequests");
        });

        modelBuilder.Entity<Aoq>(entity =>
        {
            entity.ToTable("AOQ");

            entity.Property(e => e.Abc)
                .HasColumnType("money")
                .HasColumnName("ABC");
            entity.Property(e => e.Bacchairperson).HasColumnName("BACChairperson");
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.CreatedById).HasMaxLength(128);
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.Rfqno).HasColumnName("RFQNo");

            entity.HasOne(d => d.BacchairpersonNavigation).WithMany(p => p.Aoqs)
                .HasForeignKey(d => d.Bacchairperson)
                .HasConstraintName("FK_AOQ_Signatories");

            entity.HasOne(d => d.Office).WithMany(p => p.Aoqs)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AOQ_Offices");

            entity.HasOne(d => d.Pr).WithMany(p => p.Aoqs)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AOQ_PurchaseRequests");

            entity.HasMany(d => d.Bacs).WithMany(p => p.AoqsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "BacinAoq",
                    r => r.HasOne<Signatory>().WithMany()
                        .HasForeignKey("Bacid")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BACInAOQ_Signatories"),
                    l => l.HasOne<Aoq>().WithMany()
                        .HasForeignKey("Aoqid")
                        .HasConstraintName("FK_BACInAOQ_AOQ"),
                    j =>
                    {
                        j.HasKey("Aoqid", "Bacid");
                        j.ToTable("BACInAOQ");
                        j.IndexerProperty<int>("Aoqid").HasColumnName("AOQId");
                        j.IndexerProperty<int>("Bacid").HasColumnName("BACId");
                    });
        });

        modelBuilder.Entity<Aoqdetail>(entity =>
        {
            entity.ToTable("AOQDetails");

            entity.Property(e => e.Aoqid).HasColumnName("AOQId");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedById).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Aoq).WithMany(p => p.Aoqdetails)
                .HasForeignKey(d => d.Aoqid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AOQDetails_AOQ");
        });

        modelBuilder.Entity<Appropriation>(entity =>
        {
            entity.Property(e => e.AccountCode).HasMaxLength(128);
            entity.Property(e => e.AccountCodeText).HasMaxLength(128);
            entity.Property(e => e.AccountName).HasMaxLength(128);
            entity.Property(e => e.Appropriation1)
                .HasColumnType("money")
                .HasColumnName("Appropriation");
            entity.Property(e => e.Createdby).HasMaxLength(128);
            entity.Property(e => e.Ft)
                .HasMaxLength(5)
                .HasColumnName("FT");
            entity.Property(e => e.FundType).HasMaxLength(50);

            entity.HasOne(d => d.FundTypeNavigation).WithMany(p => p.Appropriations)
                .HasForeignKey(d => d.FundTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Appropriations_FundTypes");
        });

        modelBuilder.Entity<Apr>(entity =>
        {
            entity.ToTable("APRs");

            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.ModifiedBy).HasMaxLength(128);
            entity.Property(e => e.Pgsoid).HasColumnName("PGSOId");
            entity.Property(e => e.Prid).HasColumnName("PRId");

            entity.HasOne(d => d.Pr).WithMany(p => p.Aprs)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_APRs_PurchaseRequests");
        });

        modelBuilder.Entity<Aprdetail>(entity =>
        {
            entity.ToTable("APRDetails");

            entity.Property(e => e.Aprid).HasColumnName("APRId");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Apr).WithMany(p => p.Aprdetails)
                .HasForeignKey(d => d.Aprid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_APRDetails_APRs");
        });

        modelBuilder.Entity<Bacmember>(entity =>
        {
            entity.ToTable("BACMembers");

            entity.Property(e => e.FirstName).HasMaxLength(128);
            entity.Property(e => e.LastName).HasMaxLength(128);
            entity.Property(e => e.MiddleName).HasMaxLength(128);
            entity.Property(e => e.OffcAcr).HasMaxLength(128);
            entity.Property(e => e.OfficeName).HasMaxLength(128);
            entity.Property(e => e.Position).HasMaxLength(128);

            entity.HasOne(d => d.Employee).WithMany(p => p.Bacmembers)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_BACMembers_Employees");

            entity.HasOne(d => d.Office).WithMany(p => p.Bacmembers)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_BACMembers_Offices");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.Category1)
                .HasMaxLength(128)
                .HasColumnName("Category");
        });

        modelBuilder.Entity<ColumnTitle>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AccountType).HasMaxLength(20);
        });

        modelBuilder.Entity<ControlNumber>(entity =>
        {
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(128);

            entity.HasOne(d => d.Office).WithMany(p => p.ControlNumbers)
                .HasForeignKey(d => d.OfficeId)
                .HasConstraintName("FK_ControlNumbers_Offices");
        });

        modelBuilder.Entity<DefaultAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Accounts");

            entity.Property(e => e.AccountCode).HasMaxLength(128);
            entity.Property(e => e.AccountCodeText).HasMaxLength(128);
            entity.Property(e => e.FundType).HasMaxLength(128);

            entity.HasOne(d => d.FundTypeNavigation).WithMany(p => p.DefaultAccounts)
                .HasForeignKey(d => d.FundTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_DefaultAccounts_FundTypes");
        });

        modelBuilder.Entity<DocumentAction>(entity =>
        {
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.EndorsedTo).HasMaxLength(128);
            entity.Property(e => e.IsDone).HasColumnName("isDone");
            entity.Property(e => e.IsSaved).HasColumnName("isSaved");
            entity.Property(e => e.ObRPrNo)
                .HasMaxLength(128)
                .HasColumnName("ObR_PR_No");
            entity.Property(e => e.Remarks).HasMaxLength(128);
            entity.Property(e => e.Status).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(128);

            entity.HasOne(d => d.Action).WithMany(p => p.InverseAction)
                .HasForeignKey(d => d.ActionId)
                .HasConstraintName("FK_DocumentActions_DocumentActions1");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DocumentActions)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_DocumentActions_Users");

            entity.HasOne(d => d.RoutedToOffice).WithMany(p => p.DocumentActions)
                .HasForeignKey(d => d.RoutedToOfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_DocumentActions_Offices");

            entity.HasMany(d => d.Users).WithMany(p => p.DocActs)
                .UsingEntity<Dictionary<string, object>>(
                    "UsersInDocumentAction",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersInDocumentActions_Users"),
                    l => l.HasOne<DocumentAction>().WithMany()
                        .HasForeignKey("DocActId")
                        .HasConstraintName("FK_UsersInDocumentActions_DocumentActions"),
                    j =>
                    {
                        j.HasKey("DocActId", "UserId").HasName("PK_UsersInDocumentActions_1");
                        j.ToTable("UsersInDocumentActions");
                        j.IndexerProperty<string>("UserId").HasMaxLength(128);
                    });
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.ExtName).HasMaxLength(5);
            entity.Property(e => e.FirstName).HasMaxLength(128);
            entity.Property(e => e.Gsis)
                .HasMaxLength(20)
                .HasColumnName("GSIS");
            entity.Property(e => e.LastName).HasMaxLength(128);
            entity.Property(e => e.MiddleName).HasMaxLength(128);
            entity.Property(e => e.MonthlySalary).HasColumnType("money");
            entity.Property(e => e.OffcAcr).HasMaxLength(128);
            entity.Property(e => e.OfficeName).HasMaxLength(128);
            entity.Property(e => e.PagIbig).HasMaxLength(128);
            entity.Property(e => e.PhilHealth).HasMaxLength(128);
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.SalaryGrade).HasMaxLength(20);
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.Sg)
                .HasMaxLength(20)
                .HasColumnName("SG");
            entity.Property(e => e.Sss)
                .HasMaxLength(128)
                .HasColumnName("SSS");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.Steps).HasMaxLength(20);
            entity.Property(e => e.Tin)
                .HasMaxLength(128)
                .HasColumnName("TIN");

            entity.HasOne(d => d.Office).WithMany(p => p.Employees)
                .HasForeignKey(d => d.OfficeId)
                .HasConstraintName("FK_Employees_Offices");

            entity.HasMany(d => d.Payees).WithMany(p => p.Employees)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeesInPayee",
                    r => r.HasOne<Payee>().WithMany()
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeesInPayee_Payees"),
                    l => l.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeesInPayee_Employees"),
                    j =>
                    {
                        j.HasKey("EmployeeId", "PayeeId");
                        j.ToTable("EmployeesInPayee");
                    });
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.OriginalFileName).HasMaxLength(255);
            entity.Property(e => e.Path).HasMaxLength(50);
            entity.Property(e => e.RootFolder).HasMaxLength(50);
            entity.Property(e => e.TableName).HasMaxLength(50);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Files)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_Files_Users");
        });

        modelBuilder.Entity<Function>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Actions");

            entity.Property(e => e.Action).HasMaxLength(255);

            entity.HasMany(d => d.Roles).WithMany(p => p.Functions)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRolesInFunction",
                    r => r.HasOne<UserRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserRolesInFunctions_UserRoles"),
                    l => l.HasOne<Function>().WithMany()
                        .HasForeignKey("FunctionId")
                        .HasConstraintName("FK_UserRolesInFunctions_Functions"),
                    j =>
                    {
                        j.HasKey("FunctionId", "RoleId");
                        j.ToTable("UserRolesInFunctions");
                        j.IndexerProperty<string>("RoleId").HasMaxLength(128);
                    });
        });

        modelBuilder.Entity<FundType>(entity =>
        {
            entity.Property(e => e.FundType1)
                .HasMaxLength(50)
                .HasColumnName("FundType");
        });

        modelBuilder.Entity<Ic>(entity =>
        {
            entity.ToTable("ICS");

            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Pgso).HasColumnName("PGSO");
            entity.Property(e => e.Pgsopos).HasColumnName("PGSOPos");
            entity.Property(e => e.Prid).HasColumnName("PRId");

            entity.HasOne(d => d.Pr).WithMany(p => p.Ics)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ICS_PurchaseRequests");
        });

        modelBuilder.Entity<Icsdetail>(entity =>
        {
            entity.ToTable("ICSDetails");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Icsid).HasColumnName("ICSId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Ics).WithMany(p => p.Icsdetails)
                .HasForeignKey(d => d.Icsid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ICSDetails_ICS");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.Property(e => e.Category).HasMaxLength(128);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Item1)
                .HasMaxLength(255)
                .HasColumnName("Item");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ItenaryDetail>(entity =>
        {
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.DailyAllowance).HasColumnType("money");
            entity.Property(e => e.InclusiveTime).HasMaxLength(128);
            entity.Property(e => e.Iotid).HasColumnName("IOTId");
            entity.Property(e => e.MeansOfTransportation).HasMaxLength(128);
            entity.Property(e => e.PerDiems).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TransportationFee).HasColumnType("money");

            entity.HasOne(d => d.Iot).WithMany(p => p.ItenaryDetails)
                .HasForeignKey(d => d.Iotid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ItenaryDetails_ItenaryofTravels");
        });

        modelBuilder.Entity<ItenaryofTravel>(entity =>
        {
            entity.Property(e => e.ApprovedByPos).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Obrid).HasColumnName("OBRId");
            entity.Property(e => e.OfficialAddress).HasMaxLength(128);
            entity.Property(e => e.Paid).HasColumnName("PAId");
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.PreparedByPos).HasMaxLength(128);

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.ItenaryofTravelApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_ItenaryofTravels_ApprovedBy");

            entity.HasOne(d => d.Employee).WithMany(p => p.ItenaryofTravelEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ItenaryofTravels_Employees");

            entity.HasOne(d => d.Obr).WithMany(p => p.ItenaryofTravels)
                .HasForeignKey(d => d.Obrid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ItenaryofTravels_Obligations");
        });

        modelBuilder.Entity<Letter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Letters_1");

            entity.Property(e => e.Cc)
                .HasMaxLength(128)
                .HasColumnName("CC");
            entity.Property(e => e.Closing).HasMaxLength(128);
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Salutation).HasMaxLength(10);
            entity.Property(e => e.Signatories).HasMaxLength(128);
            entity.Property(e => e.SignatoriesPosition).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(128);
            entity.Property(e => e.Template).HasMaxLength(128);
            entity.Property(e => e.Title).HasMaxLength(128);
            entity.Property(e => e.Type).HasMaxLength(128);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Letters)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Letters_Users");

            entity.HasOne(d => d.Office).WithMany(p => p.Letters)
                .HasForeignKey(d => d.OfficeId)
                .HasConstraintName("FK_Letters_Offices");
        });

        modelBuilder.Entity<Liquidation>(entity =>
        {
            entity.Property(e => e.AccountantName).HasMaxLength(128);
            entity.Property(e => e.AccountantPosition).HasMaxLength(128);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.HeadName).HasMaxLength(128);
            entity.Property(e => e.HeadPosition).HasMaxLength(128);
            entity.Property(e => e.ObRid).HasColumnName("ObRId");
            entity.Property(e => e.Paid).HasColumnName("PAId");

            entity.HasOne(d => d.Employee).WithMany(p => p.Liquidations)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_Liquidations_Employees");

            entity.HasOne(d => d.HeadOfDepNavigation).WithMany(p => p.LiquidationHeadOfDepNavigations)
                .HasForeignKey(d => d.HeadOfDep)
                .HasConstraintName("FK_Liquidations_Head");

            entity.HasOne(d => d.ObR).WithMany(p => p.Liquidations)
                .HasForeignKey(d => d.ObRid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Liquidations_Obligations");

            entity.HasOne(d => d.Pa).WithMany(p => p.LiquidationPas)
                .HasForeignKey(d => d.Paid)
                .HasConstraintName("FK_Liquidations_Accountant");

            entity.HasOne(d => d.Payee).WithMany(p => p.Liquidations)
                .HasForeignKey(d => d.PayeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Liquidations_Payees");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasIndex(e => e.CreatedBy, "IX_FK_Logs_Users");

            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Logs)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_Logs_Users");
        });

        modelBuilder.Entity<Lrdetail>(entity =>
        {
            entity.ToTable("LRDetails");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.Lrid).HasColumnName("LRId");

            entity.HasOne(d => d.Lr).WithMany(p => p.Lrdetails)
                .HasForeignKey(d => d.Lrid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_LRDetails_Liquidations");
        });

        modelBuilder.Entity<Obligation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Obligations$PrimaryKey");

            entity.Property(e => e.Accountant).HasMaxLength(128);
            entity.Property(e => e.AccountantPos).HasMaxLength(128);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BudgetControlNo).HasMaxLength(100);
            entity.Property(e => e.Chief).HasMaxLength(100);
            entity.Property(e => e.ChiefPosition).HasMaxLength(255);
            entity.Property(e => e.ControlNo).HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Date).HasPrecision(0);
            entity.Property(e => e.DateClosed).HasPrecision(0);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Dmsno)
                .HasMaxLength(100)
                .HasColumnName("DMSNo");
            entity.Property(e => e.Dvamount)
                .HasColumnType("money")
                .HasColumnName("DVAmount");
            entity.Property(e => e.DvapprovedBy)
                .HasMaxLength(100)
                .HasColumnName("DVApprovedBy");
            entity.Property(e => e.DvapprovedByPosition)
                .HasMaxLength(100)
                .HasColumnName("DVApprovedByPosition");
            entity.Property(e => e.Dvnote)
                .HasMaxLength(255)
                .HasColumnName("DVNote");
            entity.Property(e => e.Dvparticular).HasColumnName("DVParticular");
            entity.Property(e => e.Ft)
                .HasMaxLength(5)
                .HasColumnName("FT");
            entity.Property(e => e.ModifiedBy).HasMaxLength(128);
            entity.Property(e => e.ObrapprovedBy)
                .HasMaxLength(128)
                .HasColumnName("OBRApprovedBy");
            entity.Property(e => e.ObrapprovedByPos)
                .HasMaxLength(128)
                .HasColumnName("OBRApprovedByPos");
            entity.Property(e => e.PayeeAddress).HasMaxLength(255);
            entity.Property(e => e.PayeeOffice).HasMaxLength(255);
            entity.Property(e => e.Pbo)
                .HasMaxLength(100)
                .HasColumnName("PBO");
            entity.Property(e => e.Pbopos)
                .HasMaxLength(100)
                .HasColumnName("PBOPos");
            entity.Property(e => e.Poid).HasColumnName("POId");
            entity.Property(e => e.Prno).HasColumnName("PRNo");
            entity.Property(e => e.ResponsibilityCenter).HasMaxLength(50);
            entity.Property(e => e.ResponsibilityCenterCode).HasMaxLength(50);
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.TotalAdjustedAmount).HasColumnType("money");
            entity.Property(e => e.Treasurer).HasMaxLength(128);
            entity.Property(e => e.TreasurerPos).HasMaxLength(128);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Obligations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Obligations_Users");

            entity.HasOne(d => d.Office).WithMany(p => p.Obligations)
                .HasForeignKey(d => d.OfficeId)
                .HasConstraintName("FK_Obligations_Offices");

            entity.HasOne(d => d.Payee).WithMany(p => p.Obligations)
                .HasForeignKey(d => d.PayeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Obligations_Payees");

            entity.HasOne(d => d.Po).WithMany(p => p.Obligations)
                .HasForeignKey(d => d.Poid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Obligations_PurchaseOrders");

            entity.HasMany(d => d.Letters).WithMany(p => p.Obrs)
                .UsingEntity<Dictionary<string, object>>(
                    "ObrinLetter",
                    r => r.HasOne<Letter>().WithMany()
                        .HasForeignKey("LetterId")
                        .HasConstraintName("FK_OBRInLetters_Letters"),
                    l => l.HasOne<Obligation>().WithMany()
                        .HasForeignKey("ObrId")
                        .HasConstraintName("FK_OBRInLetters_Obligations"),
                    j =>
                    {
                        j.HasKey("ObrId", "LetterId");
                        j.ToTable("OBRInLetters");
                    });
        });

        modelBuilder.Entity<Office>(entity =>
        {
            entity.Property(e => e.Chief).HasMaxLength(128);
            entity.Property(e => e.ChiefPosition).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.OffcAcr).HasMaxLength(50);
            entity.Property(e => e.OfficeName).HasMaxLength(128);
            entity.Property(e => e.ResponsibilityCenter).HasMaxLength(128);
            entity.Property(e => e.ResponsibilityCenterCode).HasMaxLength(128);
            entity.Property(e => e.Salutation).HasMaxLength(50);

            entity.HasOne(d => d.UnderOfNavigation).WithMany(p => p.InverseUnderOfNavigation)
                .HasForeignKey(d => d.UnderOf)
                .HasConstraintName("FK_Offices_Offices");
        });

        modelBuilder.Entity<Ordetail>(entity =>
        {
            entity.ToTable("ORDetails");

            entity.Property(e => e.AdjustedAmount).HasColumnType("money");
            entity.Property(e => e.Amount).HasColumnType("money");

            entity.HasOne(d => d.Appropriation).WithMany(p => p.Ordetails)
                .HasForeignKey(d => d.AppropriationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ORDetails_Appropriations");

            entity.HasOne(d => d.Obligation).WithMany(p => p.Ordetails)
                .HasForeignKey(d => d.ObligationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ORDetails_Obligations");
        });

        modelBuilder.Entity<Par>(entity =>
        {
            entity.ToTable("PAR");

            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.EntityName).HasMaxLength(50);
            entity.Property(e => e.FundCluster).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(128);
            entity.Property(e => e.Pgso).HasColumnName("PGSO");
            entity.Property(e => e.Pgsoid).HasColumnName("PGSOId");
            entity.Property(e => e.Pgsoposition).HasColumnName("PGSOPosition");
            entity.Property(e => e.Prid).HasColumnName("PRId");

            entity.HasOne(d => d.Pr).WithMany(p => p.Pars)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PAR_PurchaseRequests");
        });

        modelBuilder.Entity<Pardetail>(entity =>
        {
            entity.ToTable("PARDetails");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Parid).HasColumnName("PARId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Par).WithMany(p => p.Pardetails)
                .HasForeignKey(d => d.Parid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PARDetails_PAR");
        });

        modelBuilder.Entity<Payee>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(128);
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.Note).HasMaxLength(128);
            entity.Property(e => e.Office).HasMaxLength(128);

            entity.HasOne(d => d.OfficeNavigation).WithMany(p => p.Payees)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Payees_Offices");
        });

        modelBuilder.Entity<Payroll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Payroll");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Accountant).HasMaxLength(128);
            entity.Property(e => e.AccountantPos).HasMaxLength(128);
            entity.Property(e => e.ApprovedBy).HasMaxLength(128);
            entity.Property(e => e.ApprovedByPos).HasMaxLength(128);
            entity.Property(e => e.ChiefOfOffice).HasMaxLength(128);
            entity.Property(e => e.ColumnTitle1).HasMaxLength(128);
            entity.Property(e => e.ColumnTitle2).HasMaxLength(128);
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.DeptHead).HasMaxLength(128);
            entity.Property(e => e.DeptHeadPos).HasMaxLength(128);
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.Title).HasMaxLength(128);
            entity.Property(e => e.Treasurer).HasMaxLength(128);
            entity.Property(e => e.TreasurerPos).HasMaxLength(128);

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Payroll)
                .HasForeignKey<Payroll>(d => d.Id)
                .HasConstraintName("FK_Payrolls_Obligations");
        });

        modelBuilder.Entity<PayrollDetail>(entity =>
        {
            entity.Property(e => e.ColumnTitle1).HasColumnType("money");
            entity.Property(e => e.ColumnTitle2).HasColumnType("money");
            entity.Property(e => e.Total).HasColumnType("money");

            entity.HasOne(d => d.Employee).WithMany(p => p.PayrollDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PayrollDetails_Employees");

            entity.HasOne(d => d.Payroll).WithMany(p => p.PayrollDetails)
                .HasForeignKey(d => d.PayrollId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollDetails_Payrolls");
        });

        modelBuilder.Entity<PayrollDifferential>(entity =>
        {
            entity.Property(e => e.Accountant).HasMaxLength(128);
            entity.Property(e => e.AccountantPos).HasMaxLength(128);
            entity.Property(e => e.ApprovedBy).HasMaxLength(128);
            entity.Property(e => e.ApprovedByPos).HasMaxLength(128);
            entity.Property(e => e.ChiefOfOffice).HasMaxLength(128);
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.Title).HasMaxLength(128);
            entity.Property(e => e.Treasurer).HasMaxLength(128);
            entity.Property(e => e.TreasurerPos).HasMaxLength(128);

            entity.HasOne(d => d.Ob).WithMany(p => p.PayrollDifferentials)
                .HasForeignKey(d => d.ObId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollDifferentials_Obligations");
        });

        modelBuilder.Entity<PayrollDifferentialDetail>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.Designation).HasMaxLength(128);
            entity.Property(e => e.DiffBonus).HasColumnType("money");
            entity.Property(e => e.DiffMidYearBonus).HasColumnType("money");
            entity.Property(e => e.EmployeeName).HasMaxLength(128);
            entity.Property(e => e.Gsisgs)
                .HasColumnType("money")
                .HasColumnName("GSISGS");
            entity.Property(e => e.Gsisps)
                .HasColumnType("money")
                .HasColumnName("GSISPS");
            entity.Property(e => e.NewRate).HasColumnType("money");
            entity.Property(e => e.OldRate).HasColumnType("money");
            entity.Property(e => e.Phgs)
                .HasColumnType("money")
                .HasColumnName("PHGS");
            entity.Property(e => e.Phps)
                .HasColumnType("money")
                .HasColumnName("PHPS");
            entity.Property(e => e.Pigs)
                .HasColumnType("money")
                .HasColumnName("PIGS");
            entity.Property(e => e.Pips)
                .HasColumnType("money")
                .HasColumnName("PIPS");
            entity.Property(e => e.SalaryGrade).HasMaxLength(128);
            entity.Property(e => e.TotalAmount).HasColumnType("money");

            entity.HasOne(d => d.Employee).WithMany(p => p.PayrollDifferentialDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PayrollDifferentialDetails_Employees");

            entity.HasOne(d => d.PayrollDiffential).WithMany(p => p.PayrollDifferentialDetails)
                .HasForeignKey(d => d.PayrollDiffentialId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollDifferentialDetails_PayrollDifferentials");
        });

        modelBuilder.Entity<PayrollOt>(entity =>
        {
            entity.ToTable("PayrollOT");

            entity.Property(e => e.ApprovedPosition).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.HeadPosition).HasMaxLength(128);
            entity.Property(e => e.ObRid).HasColumnName("ObRId");
            entity.Property(e => e.Paid).HasColumnName("PAId");
            entity.Property(e => e.Paposition)
                .HasMaxLength(128)
                .HasColumnName("PAPosition");
            entity.Property(e => e.Ptid).HasColumnName("PTId");
            entity.Property(e => e.Ptposition)
                .HasMaxLength(128)
                .HasColumnName("PTPosition");
            entity.Property(e => e.Title).HasMaxLength(255);

            entity.HasOne(d => d.ObR).WithMany(p => p.PayrollOts)
                .HasForeignKey(d => d.ObRid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PayrollOT_Obligations");
        });

        modelBuilder.Entity<PayrollOtdetail>(entity =>
        {
            entity.ToTable("PayrollOTDetails");

            entity.Property(e => e.PayrollOtid).HasColumnName("PayrollOTId");
            entity.Property(e => e.RatePerDay).HasColumnType("money");
            entity.Property(e => e.RatePerHr).HasColumnType("money");
            entity.Property(e => e.RatePerMonth).HasColumnType("money");
            entity.Property(e => e.SubTotal).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.UnderPay).HasColumnType("money");
            entity.Property(e => e.WeekDayNoHrs).HasColumnType("money");
            entity.Property(e => e.WeekEndNoHrs).HasColumnType("money");

            entity.HasOne(d => d.Employee).WithMany(p => p.PayrollOtdetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollOTDetails_Employees");

            entity.HasOne(d => d.PayrollOt).WithMany(p => p.PayrollOtdetails)
                .HasForeignKey(d => d.PayrollOtid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollOTDetails_PayrollOT");
        });

        modelBuilder.Entity<PayrollWage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PayrollWage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Accountant).HasMaxLength(128);
            entity.Property(e => e.AccountantPos).HasMaxLength(128);
            entity.Property(e => e.ApprovedBy).HasMaxLength(128);
            entity.Property(e => e.ApprovedByPos).HasMaxLength(128);
            entity.Property(e => e.ChiefOfOffice).HasMaxLength(128);
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.Title).HasMaxLength(128);
            entity.Property(e => e.Treasurer).HasMaxLength(128);
            entity.Property(e => e.TreasurerPos).HasMaxLength(128);

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PayrollWage)
                .HasForeignKey<PayrollWage>(d => d.Id)
                .HasConstraintName("FK_PayrollWage_Obligations");
        });

        modelBuilder.Entity<PayrollWageDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PayrollWages");

            entity.Property(e => e.Birwh)
                .HasColumnType("money")
                .HasColumnName("BIRWH");
            entity.Property(e => e.Dbp)
                .HasColumnType("money")
                .HasColumnName("DBP");
            entity.Property(e => e.GrossAmount).HasColumnType("money");
            entity.Property(e => e.Gsisconsol)
                .HasColumnType("money")
                .HasColumnName("GSISConsol");
            entity.Property(e => e.Gsispolicy)
                .HasColumnType("money")
                .HasColumnName("GSISPolicy");
            entity.Property(e => e.Lbp)
                .HasColumnType("money")
                .HasColumnName("LBP");
            entity.Property(e => e.Mpl)
                .HasColumnType("money")
                .HasColumnName("MPL");
            entity.Property(e => e.NoOfdays).HasColumnType("money");
            entity.Property(e => e.Nvpea)
                .HasColumnType("money")
                .HasColumnName("NVPEA");
            entity.Property(e => e.Ot)
                .HasColumnType("money")
                .HasColumnName("OT");
            entity.Property(e => e.Pera)
                .HasColumnType("money")
                .HasColumnName("PERA");
            entity.Property(e => e.Phgs)
                .HasColumnType("money")
                .HasColumnName("PHGS");
            entity.Property(e => e.Phps)
                .HasColumnType("money")
                .HasColumnName("PHPS");
            entity.Property(e => e.PifcalLoan)
                .HasColumnType("money")
                .HasColumnName("PIFCalLoan");
            entity.Property(e => e.Pigs)
                .HasColumnType("money")
                .HasColumnName("PIGS");
            entity.Property(e => e.Pips)
                .HasColumnType("money")
                .HasColumnName("PIPS");
            entity.Property(e => e.RatePerDay).HasColumnType("money");
            entity.Property(e => e.Sssloan)
                .HasColumnType("money")
                .HasColumnName("SSSLoan");
            entity.Property(e => e.Sssps)
                .HasColumnType("money")
                .HasColumnName("SSSPS");
            entity.Property(e => e.Total).HasColumnType("money");

            entity.HasOne(d => d.Employee).WithMany(p => p.PayrollWageDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PayrollWages_Employees");

            entity.HasOne(d => d.PayrollWage).WithMany(p => p.PayrollWageDetails)
                .HasForeignKey(d => d.PayrollWageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PayrollWageDetails_PayrollWages");
        });

        modelBuilder.Entity<Pi>(entity =>
        {
            entity.ToTable("PIS");

            entity.Property(e => e.PreparedBy).HasMaxLength(128);
            entity.Property(e => e.PreparedByPos).HasMaxLength(128);
            entity.Property(e => e.Prid).HasColumnName("PRId");

            entity.HasOne(d => d.PreparedByNavigation).WithMany(p => p.Pis)
                .HasForeignKey(d => d.PreparedBy)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PIS_Users");

            entity.HasOne(d => d.Pr).WithMany(p => p.Pis)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PIS_PurchaseRequests");
        });

        modelBuilder.Entity<Pisdetail>(entity =>
        {
            entity.ToTable("PISDetails");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Item).IsRequired();
            entity.Property(e => e.Pisid).HasColumnName("PISId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Pis).WithMany(p => p.Pisdetails)
                .HasForeignKey(d => d.Pisid)
                .HasConstraintName("FK_PISDetails_PIS");
        });

        modelBuilder.Entity<Podetail>(entity =>
        {
            entity.ToTable("PODetails");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Item).IsRequired();
            entity.Property(e => e.Poid).HasColumnName("POId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Po).WithMany(p => p.Podetails)
                .HasForeignKey(d => d.Poid)
                .HasConstraintName("FK_PODetails_PurchaseOrders");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.Position1)
                .HasMaxLength(128)
                .HasColumnName("Position");
        });

        modelBuilder.Entity<Pqdetail>(entity =>
        {
            entity.ToTable("PQDetails");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Pqid).HasColumnName("PQId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Pq).WithMany(p => p.Pqdetails)
                .HasForeignKey(d => d.Pqid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PQDetails_PurchaseQuotations");
        });

        modelBuilder.Entity<Prdetail>(entity =>
        {
            entity.ToTable("PRDetails");

            entity.HasIndex(e => e.ItemNo, "IX_PRDetails");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TableName).HasMaxLength(128);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemNavigation).WithMany(p => p.Prdetails)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRDetails_Items");

            entity.HasOne(d => d.Pr).WithMany(p => p.Prdetails)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRDetails_PurchaseRequests");
        });

        modelBuilder.Entity<PriceQuotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PurchaseQuotations");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.Pgsofficer).HasColumnName("PGSOfficer");
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.TotalAmount).HasColumnType("money");

            entity.HasOne(d => d.Pr).WithMany(p => p.PriceQuotations)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PurchaseQuotations_PurchaseRequests");
        });

        modelBuilder.Entity<Province>(entity =>
        {
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.SortOrder)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.DeliveryTerm).HasMaxLength(128);
            entity.Property(e => e.ModeOfProcurement).HasMaxLength(128);
            entity.Property(e => e.PaymentTerm).HasMaxLength(128);
            entity.Property(e => e.Pgsofficer).HasColumnName("PGSOfficer");
            entity.Property(e => e.PlaceOfDelivery).HasMaxLength(128);
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pono)
                .HasMaxLength(128)
                .HasColumnName("PONo");
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.Prno)
                .HasMaxLength(128)
                .HasColumnName("PRNo");
            entity.Property(e => e.TotalAmount).HasColumnType("money");

            entity.HasOne(d => d.Pr).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PurchaseOrders_PurchaseRequests");
        });

        modelBuilder.Entity<PurchaseRequest>(entity =>
        {
            entity.Property(e => e.BudgetControlNo).HasMaxLength(128);
            entity.Property(e => e.ControlNo).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Ft)
                .HasMaxLength(5)
                .HasColumnName("FT");
            entity.Property(e => e.Pa).HasColumnName("PA");
            entity.Property(e => e.Papos).HasColumnName("PAPos");
            entity.Property(e => e.TableName).HasMaxLength(128);
            entity.Property(e => e.TotalAmount).HasColumnType("money");

            entity.HasOne(d => d.Appropriation).WithMany(p => p.PurchaseRequests)
                .HasForeignKey(d => d.AppropriationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PurchaseRequests_Appropriations");

            entity.HasOne(d => d.Office).WithMany(p => p.PurchaseRequests)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PurchaseRequests_Offices");
        });

        modelBuilder.Entity<ReAlignment>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);

            entity.HasOne(d => d.SourceAppropriation).WithMany(p => p.ReAlignmentSourceAppropriations)
                .HasForeignKey(d => d.SourceAppropriationId)
                .HasConstraintName("FK_ReAlignments_Appropriations");

            entity.HasOne(d => d.TargetAppropriation).WithMany(p => p.ReAlignmentTargetAppropriations)
                .HasForeignKey(d => d.TargetAppropriationId)
                .HasConstraintName("FK_ReAlignments_TargetSource");
        });

        modelBuilder.Entity<Risdetail>(entity =>
        {
            entity.ToTable("RISDetails");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Item).IsRequired();
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.Risid).HasColumnName("RISId");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UOM");

            entity.HasOne(d => d.Ris).WithMany(p => p.Risdetails)
                .HasForeignKey(d => d.Risid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RISDetails_RISHeader");
        });

        modelBuilder.Entity<Risheader>(entity =>
        {
            entity.ToTable("RISHeader");

            entity.Property(e => e.ApprovedBy).HasMaxLength(128);
            entity.Property(e => e.ApprovedByPos).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.IssuedBy).HasMaxLength(128);
            entity.Property(e => e.IssuedByPos).HasMaxLength(128);
            entity.Property(e => e.Prid).HasColumnName("PRId");
            entity.Property(e => e.ReceivedBy).HasMaxLength(128);
            entity.Property(e => e.ReceivedByPos).HasMaxLength(128);
            entity.Property(e => e.RequestedBy).HasMaxLength(128);
            entity.Property(e => e.RequestedByPos).HasMaxLength(128);
            entity.Property(e => e.Risdate).HasColumnName("RISDate");
            entity.Property(e => e.Risno)
                .HasMaxLength(50)
                .HasColumnName("RISNo");
            entity.Property(e => e.Sai)
                .HasMaxLength(50)
                .HasColumnName("SAI");
            entity.Property(e => e.Saidate).HasColumnName("SAIDate");

            entity.HasOne(d => d.Office).WithMany(p => p.Risheaders)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_RISHeader_Offices");

            entity.HasOne(d => d.Pr).WithMany(p => p.Risheaders)
                .HasForeignKey(d => d.Prid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RISHeader_PurchaseRequests");
        });

        modelBuilder.Entity<SalarySchedule>(entity =>
        {
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Sg)
                .HasMaxLength(50)
                .HasColumnName("SG");
        });

        modelBuilder.Entity<Signatory>(entity =>
        {
            entity.HasOne(d => d.Employee).WithMany(p => p.Signatories)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Signatories_Employees");
        });

        modelBuilder.Entity<Town>(entity =>
        {
            entity.HasIndex(e => e.ProvinceId, "IX_FK_Towns_Towns");

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Province).WithMany(p => p.Towns)
                .HasForeignKey(d => d.ProvinceId)
                .HasConstraintName("FK_Towns_Towns");
        });

        modelBuilder.Entity<TrashBin>(entity =>
        {
            entity.ToTable("TrashBin");

            entity.Property(e => e.DeletedBy).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(50);

            entity.HasOne(d => d.Office).WithMany(p => p.TrashBins)
                .HasForeignKey(d => d.OfficeId)
                .HasConstraintName("FK_TrashBin_Offices");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_TrashBin_TrashBin");
        });

        modelBuilder.Entity<UnitOfMeasurement>(entity =>
        {
            entity.ToTable("UnitOfMeasurement");

            entity.Property(e => e.UnitOfMeasurement1)
                .HasMaxLength(128)
                .HasColumnName("UnitOfMeasurement");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.AddressLine1).HasMaxLength(500);
            entity.Property(e => e.AddressLine2).HasMaxLength(500);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.Cellular).HasMaxLength(25);
            entity.Property(e => e.Citizenship).HasMaxLength(50);
            entity.Property(e => e.CivilStatus).HasMaxLength(12);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(128);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Gender).HasMaxLength(6);
            entity.Property(e => e.Height).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(150);
            entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber).HasMaxLength(25);
            entity.Property(e => e.Religion).HasMaxLength(50);
            entity.Property(e => e.UserName).HasMaxLength(50);
            entity.Property(e => e.Weight).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Office).WithMany(p => p.Users)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Users_Offices");
        });

        modelBuilder.Entity<UserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_FK_UserClaims_Users");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.UserClaims)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserClaims_Users");
        });

        modelBuilder.Entity<UserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId });

            entity.HasIndex(e => e.UserId, "IX_FK_UserLogins_Users");

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.UserLogins)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserLogins_Users");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasMany(d => d.Users).WithMany(p => p.UserRoles)
                .UsingEntity<Dictionary<string, object>>(
                    "UsersInRole",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersInRoles_Users"),
                    l => l.HasOne<UserRole>().WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersInRoles_UserRoles"),
                    j =>
                    {
                        j.HasKey("UserRolesId", "UsersId");
                        j.ToTable("UsersInRoles");
                        j.HasIndex(new[] { "UsersId" }, "IX_FK_UsersInRoles_Users");
                        j.IndexerProperty<string>("UserRolesId")
                            .HasMaxLength(128)
                            .HasColumnName("UserRoles_Id");
                        j.IndexerProperty<string>("UsersId")
                            .HasMaxLength(128)
                            .HasColumnName("Users_Id");
                    });
        });

        modelBuilder.Entity<Year>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Year");

            entity.Property(e => e.Year1).HasColumnName("Year");

            entity.HasOne(d => d.Office).WithMany(p => p.Years)
                .HasForeignKey(d => d.OfficeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Years_Offices");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}