// <auto-generated />
using System;
using MicroFinancing.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroFinancing.DataMigrations.Migrations
{
    [DbContext(typeof(MFDbContext))]
    [Migration("20220921104630_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "B461BCC5-BEDD-41DA-B137-5CCA0E50E2A6",
                            ConcurrencyStamp = "56398b71-a0d8-4dc3-ba9f-c7bbdbf6e0c7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Administrator",
                            RoleId = "B461BCC5-BEDD-41DA-B137-5CCA0E50E2A6"
                        });
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c0ea7b0e-e5db-4f17-9c35-87dd2ac20895",
                            RoleId = "B461BCC5-BEDD-41DA-B137-5CCA0E50E2A6"
                        });
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MicroFinancing.Entities.CustomerEntities.ChildInfo", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildId"), 1L, 1);

                    b.Property<DateTime>("ChildsDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChildsFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildsGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildsLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildsMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChildId");

                    b.ToTable("ChildInfo");
                });

            modelBuilder.Entity("MicroFinancing.Entities.CustomerEntities.CustomerAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("MicroFinancing.Entities.CustomerEntities.Customers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AgencyEmloyeeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<int?>("ChildInfoChildId")
                        .HasColumnType("int");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerAddressAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationalBackgroundId")
                        .HasColumnType("int");

                    b.Property<string>("FathersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Gsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MothersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameExtension")
                        .HasColumnType("int");

                    b.Property<string>("Pagibig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhilHeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildInfoChildId");

                    b.HasIndex("CustomerAddressAddressId");

                    b.HasIndex("EducationalBackgroundId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MicroFinancing.Entities.CustomerEntities.EducationalBackground", b =>
                {
                    b.Property<int>("EducationalBackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationalBackgroundId"), 1L, 1);

                    b.Property<string>("CollegeHonorReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeNameOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegePeriodOfAttendanceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegePeriodOfAttendanceTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeYearGraduated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementaryHonorReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementaryNameOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementaryPeriodOfAttendanceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementaryPeriodOfAttendanceTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementaryYearGraduated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduateStudiesGraduated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduateStudiesHonorReceived")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduateStudiesNameOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduateStudiesPeriodOfAttendanceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduateStudiesPeriodOfAttendanceTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryHonorReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryNameOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPeriodOfAttendanceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPeriodOfAttendanceTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryYearGraduated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocationalHonorReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocationalNameOfSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocationalPeriodOfAttendanceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocationalPeriodOfAttendanceTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocationalYearGraduated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationalBackgroundId");

                    b.ToTable("EducationalBackground");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationRoleClaims", b =>
                {
                    b.HasOne("MicroFinancing.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserClaims", b =>
                {
                    b.HasOne("MicroFinancing.Entities.ApplicationUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("MicroFinancing.Entities.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("MicroFinancing.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroFinancing.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("MicroFinancing.Entities.ApplicationUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroFinancing.Entities.CustomerEntities.Customers", b =>
                {
                    b.HasOne("MicroFinancing.Entities.CustomerEntities.ChildInfo", "ChildInfo")
                        .WithMany()
                        .HasForeignKey("ChildInfoChildId");

                    b.HasOne("MicroFinancing.Entities.CustomerEntities.CustomerAddress", "CustomerAddress")
                        .WithMany()
                        .HasForeignKey("CustomerAddressAddressId");

                    b.HasOne("MicroFinancing.Entities.CustomerEntities.EducationalBackground", "EducationalBackground")
                        .WithMany()
                        .HasForeignKey("EducationalBackgroundId");

                    b.Navigation("ChildInfo");

                    b.Navigation("CustomerAddress");

                    b.Navigation("EducationalBackground");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MicroFinancing.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
