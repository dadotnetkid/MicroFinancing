@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor.Popups
@using Blazored.FluentValidation
@using MicroFinancing.Core.Common
@using MicroFinancing.DataTransferModel
@using MicroFinancing.Interfaces.Services
@using Syncfusion.Blazor.DropDowns


<SfDialog Width="900px" ShowCloseIcon="true" @bind-Visible="visibility" CssClass="modal-center-top">
    <DialogPositionData X="center" />
    <DialogTemplates>
        <Header> Add/Edit Permission</Header>
        <Content>
            <EditForm Model="permission">
                <div class="row mt-2">
                    <div class="col-12">
                        <Syncfusion.Blazor.Inputs.SfTextBox @bind-Value="@permission.Name" Placeholder="Name" CssClass="e-outline" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" />
                        <ValidationMessage For="@(()=>permission.Name)" TValue="string" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-12">

                        <SfMultiSelect TValue="string[]" TItem="ClaimsLookup" Mode="@VisualMode.Default"
                                       CssClass="e-outline"
                                       FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto"
                                       @bind-Value="permission.Scopes"
                                       Placeholder="Permissions" DataSource="@claimsValueModels">
                            <MultiSelectFieldSettings Text="@nameof(ClaimsLookup.Name)"
                                                      Value="@nameof(ClaimsLookup.Value)" />
                        </SfMultiSelect>
                        <ValidationMessage For="@(()=>permission.Scopes)" TValue="string[]" />
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Submit" OnClick="@OnBtnSubmitClick" />
        <DialogButton IsPrimary="false" Content="Cancel" OnClick="@OnBtnCancelClick" />
    </DialogButtons>
</SfDialog>
@code {
    [CascadingParameter(Name = "MainPage")] Index? MainPage { get; set; }
    private bool visibility;
    //private FluentValidationValidator? fluentValidator;
    private List<ClaimsLookup>? claimsValueModels;
    private CreateUpdatePermissionDTM permission = new();
    [Inject] private IPermissionService permissionService { get; set; }
    [Inject] private ClaimsValueModel? claimsValueModel { get; set; }
    public void Show(CreateUpdatePermissionDTM? createUpdateUserDtm = null)
    {
        visibility = true;
        if (createUpdateUserDtm is not null)
        {
            permission = createUpdateUserDtm;
        }
        claimsValueModels = claimsValueModel?.ClaimsValueModels;
        StateHasChanged();
    }

    public void Hide()
    {
        visibility = false;
        permission = new();
        StateHasChanged();
    }

    private void OnBtnCancelClick()
    {
        Hide();
    }

    private async Task OnBtnSubmitClick()
    {
        var validate = true;// await fluentValidator?.ValidateAsync(x => { })!;
        if (validate)
        {
            if (string.IsNullOrEmpty(permission.Id))
            {
                await permissionService.Create(permission);
            }
            else
            {
                await permissionService.Update(permission);
            }
            await MainPage?.RefreshGrid()!;
            Hide();
        }
    }



}