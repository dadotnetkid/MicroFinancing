@page "/Maintenance/Users"
@attribute [Authorize(Policy = ClaimsConstant.Users.View)]
<div class="card">
    <div class="card-header">
        <div class="float-left">
            <h5>Users</h5>
        </div>
        <div class="float-right">
            <Syncfusion.Blazor.Buttons.SfButton IconCss="fas fa-user-plus" OnClick="CreateUser" />
        </div>
    </div>
    <div class="card-body">
        <SfGrid AllowPaging="true" TValue="UserGridDTM" @ref="userGrid">
            <Syncfusion.Blazor.Data.SfDataManager AdaptorInstance="typeof(UserAdaptor)" Adaptor="Adaptors.CustomAdaptor"/>
            <GridColumns>
                <GridColumn Field=@nameof(UserGridDTM.FirstName) Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserGridDTM.LastName) Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserGridDTM.Email) Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserGridDTM.UserName) Width="150"></GridColumn>
                <GridColumn Field=@nameof(UserGridDTM.UserRoles) Width="150">
                    <Template>
                        @{
                            var item = context as UserGridDTM;
                        }

                        @if (item is { UserRoles: { } })
                        {
                            foreach (var i in item.UserRoles)
                            {
                                <span class="badge badge-primary mr-1">@i.Name</span>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Width="80" TextAlign="TextAlign.Right">
                    <HeaderTemplate>


                    </HeaderTemplate>
                    <Template>

                        <SfDropDownButton IconCss="fas fa-ellipsis-v">
                            <DropDownMenuItems>
                                <DropDownMenuItem Id="edit" Text="Edit" IconCss="fas fa-user-edit"></DropDownMenuItem>
                                <DropDownMenuItem Id="delete" Text="Delete" IconCss="fas fa-trash"></DropDownMenuItem>
                                <DropDownMenuItem Id="reset" Text="Reset Password" IconCss="fas fa-redo"></DropDownMenuItem>
                            </DropDownMenuItems>
                            <DropDownButtonEvents ItemSelected="@((e) => OnDropdownSelectedMenu(e, context as UserGridDTM))"/>
                        </SfDropDownButton>


                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
<CascadingValue Value="this" Name="MainPage">
    <AddEditUser @ref="addEditUser" />
    <ResetPassword @ref="resetPassword" />
</CascadingValue>
@code {
    private AddEditUser? addEditUser;
    private ResetPassword? resetPassword;
    private SfGrid<UserGridDTM>? userGrid;
    [Inject] private IUserService? userService { get; set; }
    private void CreateUser()
    {
        addEditUser?.Show();
    }

    private void EditUser(UserGridDTM context)
    {
        addEditUser?.Show(new CreateUpdateUserDTM()
            {
                Email = context.Email,
                FirstName = context.FirstName,
                LastName = context.LastName,
                UserId = context.Id,
                UserName = context.UserName,
            });
    }
    private async Task DeleteUser(UserGridDTM context)
    {
        await userService.DeleteUser(context.Id);
        await userGrid?.Refresh()!;
    }

    public async Task RefreshGrid()
    {
        await userGrid?.Refresh()!;
    }


    private void ResetPassword(UserGridDTM context)
    {
        resetPassword?.Show(new ResetPasswordUserDTM()
            {
                UserId = context.Id,
            });
    }

    private async Task OnDropdownSelectedMenu(MenuEventArgs e, UserGridDTM context)
    {
        if (e.Item.Id == "edit")
        {
            EditUser(context);
        }
        else if (e.Item.Id == "reset")
        {
            ResetPassword(context);
        }
        else if (e.Item.Id == "delete")
        {
            await DeleteUser(context);
        }
    }


}