@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor.Popups
@using MicroFinancing.DataTransferModel
@using Blazored.FluentValidation
@using MicroFinancing.Components.ToastsComponent
@using MicroFinancing.Interfaces.Services
<SfDialog Width="500px" ShowCloseIcon="true" @bind-Visible="visibility" CssClass="modal-center-top">
    <DialogPositionData X="center" />
    <DialogTemplates>
        <Header> Reset Password</Header>
        <Content>
            <EditForm Model="resetPasswordUserDTM">
                <FluentValidationValidator DisableAssemblyScanning="true" @ref="fluentValidator" />
                <div class="row mt-2">
                    <div class="col-12">
                        <Syncfusion.Blazor.Inputs.SfTextBox Type="Syncfusion.Blazor.Inputs.InputType.Password" @bind-Value="@resetPasswordUserDTM.Password" Placeholder="Password" CssClass="e-outline" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" />
                        <ValidationMessage For="@(()=>resetPasswordUserDTM.Password)" TValue="string" />
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Submit" OnClick="@OnBtnSubmitClick" />
        <DialogButton IsPrimary="false" Content="Cancel" OnClick="@OnBtnCancelClick" />
    </DialogButtons>
</SfDialog>
@code{
    private bool visibility;
    private ResetPasswordUserDTM? resetPasswordUserDTM;
    private FluentValidationValidator? fluentValidator;
    [Inject] private IUserService userService{ get; set; }
    [Inject]private IToasts toasts{get; set; }
    public void Show(ResetPasswordUserDTM item)
    {
        visibility = true;
        resetPasswordUserDTM = item;
        StateHasChanged();
    }

    public void Hide()
    {
        visibility = false;
        resetPasswordUserDTM = new();
        StateHasChanged();
    }

    private async Task OnBtnSubmitClick()
    {
        var validator =await fluentValidator?.ValidateAsync()!;
        if (validator)
        {
            if (resetPasswordUserDTM != null) await userService.ResetPassword(resetPasswordUserDTM);
            await toasts.ShowToast("Reset Password", "Successfully Reset Password");
            Hide();
        }
        
    }

    private void OnBtnCancelClick()
    {
        Hide();
    }


}