@page "/Customers"
@using MediatR
@using MicroFinancing.Components.DialogComponent
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Data
@rendermode InteractiveServer

<DialogContainer />
<div class="card">
    <div class="card-header">
        <div class="float-left">
            <h5>Customers</h5>
        </div>

        <div class="float-right">
            <Syncfusion.Blazor.Buttons.SfButton IconCss="fas fa-user-plus" OnClick="OnAddClick" />
            @*<Syncfusion.Blazor.Buttons.SfButton IconCss="fas fa-user-plus" OnClick="OnAddInlineClick">Inline</Syncfusion.Blazor.Buttons.SfButton>*@
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-3 col-xs-9">
                <SfTextBox @bind-Value="Search" ShowClearButton="true"
                           FloatLabelType="FloatLabelType.Auto"
                           CssClass="e-outline"
                           Placeholder="Search"></SfTextBox>
            </div>
            <div class="col-lg-2 col-xs-3">

                <button class="btn btn-primary"
                        @onclick="OnSearch">
                    <span class="fas fa-search"></span>
                    Search
                </button>

            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <SfGrid AllowPaging="true" AllowFiltering="true" TValue="CustomerGridDTM"
                        Query="@Query"
                        @ref="customerGrid" AllowMultiSorting="true" AllowSorting="true">
                    <Syncfusion.Blazor.Data.SfDataManager AdaptorInstance="typeof(CustomerAdaptor)"
                                                          Adaptor="Adaptors.CustomAdaptor" />
                    <GridPageSettings PageSize="20"></GridPageSettings>
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="false" Mode="EditMode.Normal"></GridEditSettings>
                    <GridSortSettings>
                        <GridSortColumns>
                            <GridSortColumn Field="@nameof(CustomerGridDTM.FirstName)" Direction="SortDirection.Ascending"></GridSortColumn>
                        </GridSortColumns>
                    </GridSortSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(CustomerGridDTM.FirstName) Width="100" AllowSorting="true">
                            <Template>
                                @{
                                    var row = (CustomerGridDTM)context;
                                }
                                <a href="@($"/Customers/Details/{row.Id}")">@row.FullName</a>
                            </Template>
                            <EditTemplate>
                                @{
                                    var item = (context as CustomerGridDTM) ?? new();
                                }
                                <Syncfusion.Blazor.Inputs.SfTextBox @bind-Value="@item.FirstName" Placeholder="First Name"
                                                                    CssClass="e-outline"
                                                                    FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" />
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(CustomerGridDTM.LastName) Width="100">
                            <EditTemplate>
                                @{
                                    var item = (context as CustomerGridDTM) ?? new();
                                }
                                <Syncfusion.Blazor.Inputs.SfTextBox @bind-Value="@item.LastName" Placeholder="First Name"
                                                                    CssClass="e-outline"
                                                                    FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" />
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(CustomerGridDTM.PhoneNumber) Width="100">

                        </GridColumn>
                        <GridColumn Field=@nameof(CustomerGridDTM.TotalDebt) Width="100">

                        </GridColumn>
                        <GridColumn Field=@nameof(CustomerGridDTM.TotalAmountPaid) Width="100">

                        </GridColumn>
                        <GridColumn Width="90" TextAlign="TextAlign.Right" AllowFiltering="false">
                            <Template>

                                <SfDropDownButton IconCss="fas fa-ellipsis-v">
                                    <DropDownMenuItems>
                                        <DropDownMenuItem Id="@GenericDropdownItem.ViewDetails.ToString()" Text="View Details" IconCss="fas fa-user-edit"></DropDownMenuItem>
                                        <DropDownMenuItem Id="@GenericDropdownItem.Edit.ToString()" Text="Edit" IconCss="fas fa-edit"></DropDownMenuItem>
                                        <DropDownMenuItem Id="@GenericDropdownItem.Delete.ToString()" Text="Delete" IconCss="fas fa-trash"></DropDownMenuItem>
                                    </DropDownMenuItems>
                                    <DropDownButtonEvents ItemSelected="@((e) => OnDropdownSelectedMenu(e, (CustomerGridDTM)context))" />
                                </SfDropDownButton>


                            </Template>
                            <EditTemplate>
                                @{
                                    var item = context as CustomerGridDTM;
                                }

                                <SfButton IsPrimary="true" IconCss="fas fa-save" OnClick="@(() => OnSaveInline(item))">Save</SfButton> &nbsp;
                                <SfButton IsPrimary="true" IconCss="fas fa-window-close" OnClick="@(() => OnCancelSaveInline(item))">Cancel</SfButton>
                            </EditTemplate>
                        </GridColumn>

                    </GridColumns>

                </SfGrid>
            </div>
        </div>
    </div>

</div>
<CascadingValue Value="this" Name="@nameof(AddCustomer.MainPage)">
    <AddCustomer @ref="@addCustomer" />
    <EditCustomer @ref="@editCustomer" />
</CascadingValue>
@code {
    private SfGrid<CustomerGridDTM>? customerGrid;
    private AddCustomer? addCustomer;
    private EditCustomer editCustomer;
    [Inject] NavigationManager navigationManager { get; set; }
    [Inject] IUserService userService { get; set; }
    [Inject] IDialogService dialogService { get; set; }
    [Inject] ICustomerService customerService { get; set; }
    public string Search { get; set; }
    public Query Query { get; set; } = new();

    public async Task RefreshGrid()
    {
        await customerGrid?.Refresh();
    }

    private async Task OnDropdownSelectedMenu(MenuEventArgs e, CustomerGridDTM context)
    {
        if (e.Item.Id == GenericDropdownItem.ViewDetails.ToString())
        {
            if (await userService.IsAuthorizeAsync(ClaimsConstant.Customer.View))
            {
                navigationManager.NavigateTo($"/Customers/Details/{context.Id}");
            }
        }
        if (e.Item.Id == GenericDropdownItem.Edit.ToString())
        {
            if (await userService.IsAuthorizeAsync(ClaimsConstant.Customer.Manage))
            {
                await editCustomer?.Show(context.Id);
            }
        }
        if (e.Item.Id == GenericDropdownItem.Delete.ToString())
        {
            if (await userService.IsAuthorizeAsync(ClaimsConstant.Customer.Manage))
            {
                var res = await dialogService.ShowDialog("Delete",
                                                "Delete this Item");

                if (!res)
                {
                    return;
                }

                await customerService.DeleteCustomer(context.Id);
                await customerGrid.Refresh();
            }
        }
    }

    private async Task DeleteCustomer(bool b,
                                      CustomerGridDTM context)
    {
        if (!b)
        {
            return;
        }

        await customerService.DeleteCustomer(context.Id);
        await customerGrid?.Refresh();
    }

    private async Task OnAddClick()
    {
        if (await userService.IsAuthorizeAsync(ClaimsConstant.Customer.Add))
        {
            addCustomer?.Show();
        }
    }

    private async Task OnAddInlineClick(MouseEventArgs obj)
    {
        if (!await userService.IsAuthorizeAsync(ClaimsConstant.Customer.Manage))
        {
            return;
        }

        await customerGrid.AddRecordAsync(new(), 0);

    }

    private Task OnSaveInline(CustomerGridDTM? item)
    {
        return Task.CompletedTask;
    }

    private async Task OnCancelSaveInline(CustomerGridDTM? item)
    {
        await customerGrid.CloseEditAsync();
        await customerGrid?.Refresh()!;
    }

    private void OnSearch()
    {
        Query.Where("FullName", "contains", Search);

        customerGrid?.Refresh();
    }

}
