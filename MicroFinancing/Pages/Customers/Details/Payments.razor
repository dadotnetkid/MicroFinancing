@using MicroFinancing.Components.DialogComponent
@using Syncfusion.Blazor.Data

<SfGrid AllowPaging="true" TValue="PaymentGridDTM" @ref="paymentGrid" Query="queryData" AllowSorting="true">
    <Syncfusion.Blazor.Data.SfDataManager AdaptorInstance="typeof(PaymentAdaptor)"
                                          Adaptor="Adaptors.CustomAdaptor" />

    <GridSortSettings>
        <GridSortColumns>
            <GridSortColumn Field="@nameof(PaymentGridDTM.PaymentDate)" Direction="SortDirection.Descending"></GridSortColumn>
        </GridSortColumns>
    </GridSortSettings>
    <GridColumns>
        <GridColumn Field=@nameof(PaymentGridDTM.LendingNumber) Width="80">
            
        </GridColumn><GridColumn Field=@nameof(PaymentGridDTM.CreatedBy) Width="100">
            <Template>
                @{
                    var row = context as PaymentGridDTM;
                }
                @if (row.Override)
                {
                    <span>@row.CreatedBy (Override)</span>
                    <br />
                    <small class="text-muted">@row.Reason</small>
                }
                else
                {
                    <span>@row.CreatedBy</span>
                }
                <br/>
                <small class=" @(row.IsApproved?"badge-success":"badge-danger") font-weight-light">
                    @(row.IsApproved?"Approved":"For submission")
                </small>
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(PaymentGridDTM.PaymentAmount) Width="75">
            <Template>
                @{
                    var row = context as PaymentGridDTM;
                }
                @if (row.Override)
                {
                    <span class="badge badge-danger p-1">@row.PaymentAmount?.ToString("n2")</span>
                }
                else
                {
                    <span>@row.PaymentAmount?.ToString("n2")</span>
                }
            </Template>
        </GridColumn>


        <GridColumn Field=@nameof(PaymentGridDTM.PaymentDate) Width="100"></GridColumn>

        @if (CurrentUser.IsInRole("Administrator"))
        {
            <GridColumn  Width="70">
                <Template>
                    @{
                        var row = context as PaymentGridDTM;
                    }
                    <a style="cursor:pointer" @onclick="@(()=>ChangePayment(row))"><span class="fas fa-exchange-alt"></span></a>
                    <a style="cursor:pointer" @onclick="@(()=>DeletePayment(row))"><span class="fas fa-trash"></span></a>
                </Template>
            </GridColumn>
        }
    </GridColumns>

</SfGrid>

<ChangePayment @ref=changePaymentRef></ChangePayment>
@code {
    private SfGrid<PaymentGridDTM>? paymentGrid;
    private Query queryData = new();
    private ChangePayment changePaymentRef;

    [CascadingParameter(Name = "MainPage")] public Index MainPage { get; set; }
    [Inject] IPaymentService paymentService { get; set; }
    [Inject] ICurrentUser CurrentUser { get; set; }
    [Inject] IDialogService DialogService { get; set; }

    protected override void OnInitialized()
    {
        queryData.AddParams("CustomerId", MainPage.Id);

        base.OnInitialized();
    }
    public async Task Refresh()
    {

        await paymentGrid.Refresh();
    }

    private async Task DeletePayment(PaymentGridDTM? row)
    {
        DialogService.ShowDialog("Delete Payment","Do you want to delete this payment",
                                 async (t) =>
                                 {
                                     if (!t)
                                     {
                                         return;
                                     }
                                     await paymentService.DeletePayment(row.Id);
                                     await Refresh();
                                 });
        

      
    }

    private void ChangePayment(PaymentGridDTM? row)
    {
        changePaymentRef.Show(row);
    }

}
