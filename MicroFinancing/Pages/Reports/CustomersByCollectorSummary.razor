@page "/clients-by-collector-summary"
@using System.Reflection
@using System.Dynamic
<div class="card">
    <div class="card-header">
        <div class="float-left">
            <h5>Clients By Collector Summary</h5>
        </div>

    </div>
    <div class="card-body">

        <div class="row">
            <div class="col-lg-3 col-xs-12">
                <Syncfusion.Blazor.DropDowns.SfComboBox TItem="UserGridDTM"
                                                        TValue="string"
                                                        @bind-Value="@Collector" Placeholder="Collector"
                                                        CssClass="e-outline"
                                                        FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto">
                    <Syncfusion.Blazor.Data.SfDataManager AdaptorInstance="@typeof(UserAdaptor)" Adaptor="Adaptors.CustomAdaptor" />
                    <Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings Text="FullName" Value="Id" />
                </Syncfusion.Blazor.DropDowns.SfComboBox>
            </div>
            <div class="col-lg-3 col-xs-12">
                <SfDatePicker @bind-Value="@DateFrom" CssClass="e-outline"
                              FloatLabelType="FloatLabelType.Auto" Placeholder="Date From">
                    <DatePickerEvents TValue="DateTime" ValueChange="@(OnDateFromValueChange)"></DatePickerEvents>
                </SfDatePicker>
            </div>
            <div class="col-lg-3 col-xs-12">
                <SfDatePicker @bind-Value="@DateTo" CssClass="e-outline"
                              FloatLabelType="FloatLabelType.Auto" Placeholder="Date From">
                </SfDatePicker>
            </div>
            <div class="col-lg-3 col-xs-12">
                <button class="btn btn-primary" @onclick="Search">
                    <span class="fas fa-search"></span>
                    Search
                </button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <SfGrid TValue="ExpandoObject"
                        @ref="grid"
                        Width="100%"
                        DataSource="@_report">
                    <GridEvents QueryCellInfo="CustomizeCell" TValue="ExpandoObject"></GridEvents>
                    <GridColumns>
                        @if (_report is not null)
                        {
                            foreach (var col in _columns.Keys.Where(c => !c.Equals("DueDate")))
                            {
                                <GridColumn Field="@(col)" AutoFit="true">

                                </GridColumn>
                            }
                        }

                    </GridColumns>

                </SfGrid>
            </div>

        </div>


    </div>

</div>

@code {
    private SfGrid<ExpandoObject>? grid;
    private List<ExpandoObject> _report;
    private IDictionary<string, object>? _columns;
    [Inject] IReportingService reportingService { get; set; }

    public required string Collector { get; set; }
    public DateTime DateTo { get; set; } = DateTime.Now.AddMonths(1);
    public DateTime DateFrom { get; set; } = DateTime.Now;

    private void CustomizeCell(QueryCellInfoEventArgs<ExpandoObject> obj)
    {
        foreach (var i in obj.Data)
        {
            if ( obj.Column.Field == "CustomerName")
            {
                IDictionary<string, object> res = obj.Data;
                var dueDate = Convert.ToDateTime(res["DueDate"]);

                @if (DateTime.Now >= dueDate)
                {
                    obj.Cell.AddClass(new[] { "bg-danger" });
                }
                else if ((dueDate - DateTime.Now).TotalDays <= 10)
                {
                    obj.Cell.AddClass(new[] { "bg-warning" });
                }

            }
        }
    }

    private async Task Search()
    {
        _report = await reportingService.GetCustomersByCollectorSummaryReport(Collector, DateFrom, DateTo);
        _columns = _report.FirstOrDefault();
        StateHasChanged();
    }

    private void OnDateFromValueChange(ChangedEventArgs<DateTime> obj)
    {
        DateTo = obj.Value.AddMonths(1);
    }

}