@using MicroFinancing.Components.ToastsComponent
@using Microsoft.JSInterop
@using Syncfusion.Blazor.Popups
<SfDialog Width="250px" @bind-Visible="IsVisible" @ref="dialog">
    <DialogPositionData X="center" Y="center"></DialogPositionData>
    <DialogTemplates>
        <Header> @Title </Header>
        <Content>@Message</Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@OkClick" />
        <DialogButton Content="Cancel" OnClick="@CancelClick" />
    </DialogButtons>
</SfDialog>
@code {

    private CancellationTokenSource FinishConfirm;
    [Inject] private IJSRuntime jsRuntime { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    internal string Message { get; set; }
    internal string Title { get; set; }
    public bool IsVisible { get; set; }

    internal string toastId = Guid.NewGuid().ToString();
    private SfDialog dialog;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DialogService.container = this;
        }
    }

    protected override void OnInitialized()
    {
        DialogService.container = this;
        base.OnInitialized();
    }

    public async Task<bool> ShowToast(string title, string message)
    {
        Message = message;
        Title = title;
        IsVisible = true;
        await dialog.ShowAsync();

        try
        {
            using (FinishConfirm = new())
            {
                await Task.Delay(-1, FinishConfirm.Token);
            }
        }
        catch (TaskCanceledException) { }

        return IsConfirm;
    }

    public Action<bool> Callback { get; set; }
    public bool IsConfirm { get; set; }

    private void OkClick(MouseEventArgs obj)
    {
        IsVisible = false;
        StateHasChanged();
        ConfirmDialog(true);
    }

    private void CancelClick(MouseEventArgs obj)
    {
        IsVisible = false;
        StateHasChanged();
        ConfirmDialog(false);
    }

    private void ConfirmDialog(bool confirmation)
    {
        IsConfirm = confirmation;
        if (FinishConfirm.Token.CanBeCanceled)
        {
            FinishConfirm.Cancel();
        }
    }
}